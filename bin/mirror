#!/usr/bin/env ruby

USAGE = <<~USAGE
  bin/mirror --all
    Mirror all NPM packages, gracefully resuming via tmp/sequence
  
  bin/mirror PACKAGE...
    Mirror specific package name(s), like `jquery`
  
  bin/mirror --deps PACKAGE...
    mirror the specified packages names plus all dependencies, recursively
USAGE

require "http"
require "json"
require "set"

def scoped_name(name)
  if name =~ %r{\A@(.*?)/(.*)\Z}
    "@#{$1}%2f#{$2}"
  else
    name
  end
end

def mirror(name, doc)
  puts "Mirroring package #{name}"
  urls = doc["versions"].reject do |version, hash|
    url = hash["dist"]["tarball"]
    shasum = hash["dist"]["shasum"]
    file = File.basename(url)
    path = File.join("db", "dist", name, file)
    (shasum && File.exist?(path) && Digest::SHA1.file(path).hexdigest == shasum).tap do |reject|
      puts "  already downloaded #{name}/#{file}" if reject
    end
  end.map do |_, hash|
    hash["dist"]["tarball"]
  end

  if urls.any?
    puts "  downloading attachments..."
    system "aria2c", "--force-sequential", "--conditional-get", "--remote-time", "--allow-overwrite", "--max-concurrent-downloads=5", "--max-connection-per-server=5", "--dir", File.join("db", "dist", name), *urls
    #system "wget", "--timestamping", "--directory-prefix", File.join("db", "dist", name), *urls
  end

  puts "  rewriting dist urls"
  doc["versions"].each do |version, hash|
    hash["dist"]["tarball"] = "http://npm.railscamp.local/#{name}/-/#{File.basename(hash["dist"]["tarball"])}"
  end

  # Scoped package
  if name =~ %r{\A(@.*?)/(.*)\Z} and not Dir.exist?("db/package/#{$1}")
    puts "  mkdir db/package/#{$1}"
    Dir.mkdir("db/package/#{$1}")
  end

  puts "  writing #{name} to database"
  File.write("db/package/#{name}.json", JSON.generate(doc))
end

if ARGV.empty?
  puts USAGE
  exit 1
elsif ARGV.include?("--help")
  puts USAGE
  exit
elsif ARGV.include?("--all")
  puts "Mirroring all packages..."

  sequence = nil
  sequence_path = "tmp/sequence"
  if File.exist?(sequence_path)
    sequence = File.read(sequence_path).chomp
    puts "  resuming from #{sequence} (from #{sequence_path})"
  end

  url = "https://replicate.npmjs.com"

  # One for fetching package json
  http = HTTP.persistent(url)

  # Iterate every document in the registry database
  Enumerator.new do |yielder|
    params = {limit: 100}
    params[:since] = sequence if sequence

    # Fetch chunks of changes since the beginning of time from the database
    HTTP.persistent(url) do |http|
      while 
	response = http.get("/registry/_changes", params: params)

	unless response.status.success?
	  puts "  failed to query upstream:"
	  puts "    #{response.inspect}"
	  break
	end

	response.parse.fetch("results").each do |result|
	  yielder.yield result
	end

	params[:since] = response.parse.fetch("last_seq")
      end
    end
  end.lazy.reject do |change|
    change.fetch("id").start_with?("_design/")
  end.lazy.reject do |change|
    change.fetch("deleted", false)
  end.lazy.each do |change|
    id = change.fetch("id")
    #doc = change.fetch("doc")
    seq = change.fetch("seq")

    if File.exist? "db/package/#{id}.json"
      puts "Skipping #{id}"
    else
      doc = http.get("/#{id.sub("/", "%2f")}").parse
      mirror(id, doc)
    end

    File.write(sequence_path, seq)
  end

  File.remove(sequence_path) if File.exist? sequence_path

  puts "Done!"
else
  include_deps = !ARGV.delete("--deps").nil?
  skip_existing = !ARGV.delete("--skip-existing").nil?
  done = Set.new
  want = Set.new(ARGV)
  HTTP.persistent("https://replicate.npmjs.com") do |http|
    while name = want.first
      want.delete(name)
      done << name

      if skip_existing && File.exist?("db/package/#{name}.json")
	puts "Already have #{name}"
	next
      end

      puts "Querying #{name}"
      # Scoped packages, @scope/package, need the slash (and the slash only) escaped
      response = http.get("/#{name.sub("/", "%2f")}")
      if response.code != 200
	puts "  failed to fetch #{name}:"
	puts "    #{response.inspect}"
	response.flush
	next
      else
	mirror(name, response.parse)
	response.flush
      end
      
      if include_deps
	walked = Set.new(done)
	walk = Set.new([name])
	while name = walk.first
	  walk.delete name
	  walked << name
	  puts "  including dependencies for #{name}"
	  doc = JSON.parse(File.read("db/package/#{name}.json"))
	  all_deps = Set.new(doc["versions"].values.flat_map { |hash| hash["dependencies"]&.keys }.compact)
	  want_deps = all_deps - walked
	  already_deps, want_deps = want_deps.partition { |dep| File.exist? "db/package/#{dep}.json" }.map(&:to_set)
	  puts "    already have: #{already_deps.to_a.join(", ")}" if already_deps.any?
	  walk.merge already_deps - walked
	  #already_deps.each { |already| mirror(already, JSON.parse(File.read("db/package/#{dep}.json"))) }
	  puts "    want: #{want_deps.to_a.join(", ")}" if want_deps.any?
	  want.merge want_deps
	end
      end
    end
  end

  puts "Done!"
end
